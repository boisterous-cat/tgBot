from datetime import datetime

import pytest
from aiogram.dispatcher.event.bases import UNHANDLED
from aiogram.enums import ChatType
from aiogram.methods import SendMessage
from aiogram.methods.base import TelegramType
from aiogram.types import (
    Update, Chat, User, Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from keyboards.keyboards import top_10, less_10


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
user_id = 123456
callback_data_top = "top_10_pressed"
callback_data_tail = "less_10_pressed"


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
def make_top_incoming_message() -> Message:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /top –æ—Ç —é–∑–µ—Ä–∞ –∫ –±–æ—Ç—É
    :return: –æ–±—ä–µ–∫—Ç Message —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π /top
    """
    return Message(
        message_id=1,
        chat=Chat(id=user_id, type=ChatType.PRIVATE),
        from_user=User(id=user_id, is_bot=False, first_name="User"),
        date=datetime.now(),
        text="/top"
    )


# –û—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤—ã–π –∫–æ–ª–ª–±–µ–∫ –±–æ—Ç—É
def make_top_incoming_callback() -> CallbackQuery:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç CallbackQuery,
    –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏—è —é–∑–µ—Ä–æ–º –∫–Ω–æ–ø–∫–∏
    —Å callback_data "top_10_pressed"
    :return: –æ–±—ä–µ–∫—Ç CallbackQuery
    """
    return CallbackQuery(
        id="1111111111111",
        chat_instance="22222222222222",
        from_user=User(id=user_id, is_bot=False, first_name="User"),
        data=callback_data_top,
        message=Message(
            message_id=1,
            chat=Chat(id=user_id, type=ChatType.PRIVATE),
            from_user=User(id=user_id, is_bot=False, first_name="User"),
            date=datetime.now(),
            text="–¢–æ–ø 10 –ª—É—á—à–∏—Ö"
        )
    )


# –û—Ç–ø—Ä–∞–≤–∏–º –≤—Ç–æ—Ä–æ–π –∫–æ–ª–ª–±–µ–∫ –±–æ—Ç—É
def make_less_incoming_callback() -> CallbackQuery:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç CallbackQuery,
    –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏—è —é–∑–µ—Ä–æ–º –∫–Ω–æ–ø–∫–∏
    —Å callback_data "less_10_pressed"
    :return: –æ–±—ä–µ–∫—Ç CallbackQuery
    """
    return CallbackQuery(
        id="1111111111100",
        chat_instance="22222222222200",
        from_user=User(id=user_id, is_bot=False, first_name="User"),
        data=callback_data_tail,
        message=Message(
            message_id=1,
            chat=Chat(id=user_id, type=ChatType.PRIVATE),
            from_user=User(id=user_id, is_bot=False, first_name="User"),
            date=datetime.now(),
            text="–¢–æ–ø 10 —Ö—É–¥—à–∏—Ö"
        )
    )


# –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# –ò –µ—Å—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@pytest.mark.asyncio
async def test_top_command(dp, bot):
    # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /top
    bot.add_result_for(
        method=SendMessage,
        ok=True,
        # result —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /top
    update = await dp.feed_update(
        bot,
        Update(message=make_top_incoming_message(), update_id=1)
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    assert update is not UNHANDLED

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    outgoing_message: TelegramType = bot.get_request()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Ç–∏–ø, —Ç–µ–∫—Å—Ç, –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    assert isinstance(outgoing_message, SendMessage)
    assert outgoing_message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å"
    assert outgoing_message.reply_markup is not None
    markup = outgoing_message.reply_markup
    assert isinstance(markup, InlineKeyboardMarkup)
    button_top: InlineKeyboardButton = markup.inline_keyboard[0][0]
    assert button_top == top_10
    button_tail: InlineKeyboardButton = markup.inline_keyboard[1][0]
    assert button_tail == less_10


# –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –±–æ—Ç –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏
@pytest.mark.asyncio
async def test_top_10_pressed_callback(dp, bot):
    # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–ª–±—ç–∫
    bot.add_result_for(
        method=SendMessage,
        ok=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–±—ç–∫ —Å data = myid
    update = await dp.feed_update(
        bot,
        Update(callback_query=make_top_incoming_callback(), update_id=1)
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–ª–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    assert update is not UNHANDLED

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç–æ–º –∫–æ–ª–ª–±—ç–∫
    outgoing_callback: TelegramType = bot.get_request()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Ç–∏–ø, —Ç–µ–∫—Å—Ç, –≤–∏–¥ –∞–ª–µ—Ä—Ç–∞
    assert isinstance(outgoing_callback, SendMessage)
    assert "–¢–æ–ø 10 –ª—É—á—à–∏—Ö" in outgoing_callback.text
    assert outgoing_callback.parse_mode == 'HTML'


@pytest.mark.asyncio
async def test_less_10_pressed_callback(dp, bot):
    # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–ª–±—ç–∫
    bot.add_result_for(
        method=SendMessage,
        ok=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–±—ç–∫ —Å data = myid
    update = await dp.feed_update(
        bot,
        Update(callback_query=make_less_incoming_callback(), update_id=1)
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–ª–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    assert update is not UNHANDLED

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç–æ–º –∫–æ–ª–ª–±—ç–∫
    outgoing_callback: TelegramType = bot.get_request()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Ç–∏–ø, —Ç–µ–∫—Å—Ç, –≤–∏–¥ –∞–ª–µ—Ä—Ç–∞
    assert isinstance(outgoing_callback, SendMessage)
    assert "–¢–æ–ø 10 —Ö—É–¥—à–∏—Ö" in outgoing_callback.text
    assert outgoing_callback.parse_mode == 'HTML'

# @pytest.mark.asyncio
# async def test_process_help_command():
#     message = AsyncMock()
#     await process_help_command(message)
#
#     message.answer.assert_called_with(text=LEXICON_RU['/help'])
#
# @pytest.mark.asyncio
# async def test_process_project_command():
#     message = AsyncMock()
#     await process_project_command(message)
#     message.answer.assert_called_with(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ gitHub –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–ºü§î',
#         reply_markup=keyboard)
#
# @pytest.mark.asyncio
# async def test_process_top_command():
#     requester = MockedBot(request_handler=MessageHandler(process_top_command, Command(commands=["top"])))
#     requester.add_result_for(SendMessage, ok=True)
#     calls = await requester.query(MESSAGE.as_object(text="/top"))
#     answer_message = calls.send_message.fetchone()
#     reply_keyboard_markup_dict = answer_message.reply_markup
#
#     assert answer_message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å"
#     assert isinstance(reply_keyboard_markup_dict, dict)
#
# @pytest.mark.asyncio
# async def test_process_aqi_command():
#     requester = MockedBot(request_handler=MessageHandler(process_aqi_command, Command(commands=["aqi"]), state=default_state))
#     requester.add_result_for(SendMessage, ok=True)
#     calls = await requester.query(MESSAGE.as_object(text="/aqi"))
#     answer_message = calls.send_message.fetchone().text
#     assert answer_message == "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å CO"
#     #assert calls.__getstate__()==FSMFillForm.fill_co
#
# #@pytest.mark.parametrize("case", [F.about["test"], F.about[100]])
# @pytest.mark.asyncio
# async def test_process_top_10_press():
#     requester = MockedBot(CallbackQueryHandler(process_top_10_press, F.data=='top_10_pressed'))
#
#     callback_query = CALLBACK_QUERY.as_object(
#         data='top_10_pressed', message=MESSAGE.as_object(text="")
#     )
#     calls = await requester.query(callback_query)
#
#     answer_text = calls.send_message.fetchone()
#     assert "–¢–æ–ø 10 –ª—É—á—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤" in answer_text.text
#     assert answer_text.parse_mode=='HTML'
#     assert F.data == 'top_100_pressed'
#
#     # callback_query = CALLBACK_QUERY.as_object(
#     #     data='top_10_pressed', message=MESSAGE.as_object(text="Hello world!")
#     # )
#     # calls = await requester.query(callback_query)
#     #
#     # answer_text = calls.send_message.fetchone().text
#     # assert answer_text == "Hello, Mike"
